CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(DEVSTONE CXX C)
ENABLE_TESTING()

SET(DEVSTONE_MAJOR 1)
SET(DEVSTONE_MINOR 0)
SET(DEVSTONE_PATCH 0)
SET(DEVSTONE_EXTRA "")
SET(DEVSTONE_VERSION "${DEVSTONE_MAJOR}.${DEVSTONE_MINOR}.${DEVSTONE_PATCH}")
SET(DEVSTONE_VERSION_SHORT "${DEVSTONE_MAJOR}.${DEVSTONE_MINOR}")
SET(DEVSTONE_NAME "devstone")
SET(DEVSTONE_NAME_VERSION "${DEVSTONE_NAME}-${DEVSTONE_VERSION}")
SET(DEVSTONE_LOCALE_NAME "${DEVSTONE_NAME}-${DEVSTONE_MAJOR}-${DEVSTONE_MINOR}")
IF ("${DEVSTONE_EXTRA}" STREQUAL "")
  SET(DEVSTONE_COMPLETE "${DEVSTONE_MAJOR}.${DEVSTONE_MINOR}.${DEVSTONE_PATCH}")
ELSE ("${DEVSTONE_EXTRA}" STREQUAL "")
  SET(DEVSTONE_COMPLETE "${DEVSTONE_MAJOR}.${DEVSTONE_MINOR}.${DEVSTONE_PATCH}-${DEVSTONE_EXTRA}")
ENDIF ("${DEVSTONE_EXTRA}" STREQUAL "")
SET(DEVSTONE_NAME_COMPLETE "${DEVSTONE_NAME}-${DEVSTONE_COMPLETE}")

#
 # Installation variables
#

SET(DEVSTONE_LIBRARY_DIRS "lib/devstone-${DEVSTONE_VERSION_SHORT}")
SET(DEVSTONE_INCLUDE_DIRS "include/devstone-${DEVSTONE_VERSION_SHORT}/devstone")
SET(DEVSTONE_INCLUDE_DIR "include/devstone-${DEVSTONE_VERSION_SHORT}")
SET(DEVSTONE_MANPAGE_PATH "share/man/man1")
SET(DEVSTONE_SHARE_DIRS "share/devstone-${DEVSTONE_VERSION_SHORT}")

#
 # Append the library version information to the library target
 # properties.
#

SET (DEVSTONE_LIBRARY_PROPERTIES VERSION 0)
SET (DEVSTONE_APP_PROPERTIES SOVERSION "${DEVSTONE_MAJOR}.${DEVSTONE_MINOR}"
  VERSION "${DEVSTONE_MAJOR}.${DEVSTONE_MINOR}")

#
 # CPack configuration
#

INCLUDE(CMakeCPack.cmake)

#
 # Debug mode
#

IF (CMAKE_COMPILER_IS_GNUCC AND CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -std=c++11 -pthread")
  IF (UNIX)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pedantic")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pedantic")
  ENDIF (UNIX)
ENDIF (CMAKE_COMPILER_IS_GNUCC AND CMAKE_COMPILER_IS_GNUCXX)

if (CMAKE_BUILD_TYPE STREQUAL "")
  SET(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING "Choose the type of build" FORCE)
endif ()

#
 # Modules
#

INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckLibraryExists)
INCLUDE(CMakeDetermineCCompiler)

#
 # Check libraries with pkgconfig
#

FIND_PACKAGE(PkgConfig REQUIRED)

# FIXME use old-style link directories for now
IF (COMMAND CMAKE_POLICY)
  CMAKE_POLICY(SET CMP0003 OLD)
ENDIF (COMMAND CMAKE_POLICY)

PKG_CHECK_MODULES(GLIBMM REQUIRED glibmm-2.4)
#
 # Test the libboost header and libboost-text library.
#

OPTION(WITH_TEST "use the libboost test unit library [default: on]" ON)
SET(Boost_USE_MULTITHREADED ON)
SET(Boost_USE_STATIC_LIBS OFF)
SET(Boost_NO_SYSTEM_PATHS OFF)
SET(Boost_USE_STATIC_RUNTIME ON)
IF (WIN32)
  SET(Boost_THREADAPI "win32")
ENDIF (WIN32)
SET(Boost_DETAILED_FAILURE_MSG FALSE)
SET(Boost_DEBUG FALSE)

FIND_PACKAGE(Boost COMPONENTS graph timer system)
IF (NOT Boost_GRAPH_FOUND)
  MESSAGE(FATAL_ERROR "The boost graph library is required")
ENDIF (NOT Boost_GRAPH_FOUND)
IF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "35")
  SET(Boost_SYSTEM_LIBRARY "")
ENDIF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "35")
IF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "41")
  SET(DEVSTONE_HAVE_BOOST_SPIRIT2 0 CACHE INTERNAL "" FORCE)
ELSE (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "41")
  SET(DEVSTONE_HAVE_BOOST_SPIRIT2 1 CACHE INTERNAL "" FORCE)
ENDIF (Boost_MINOR_VERSION AND ${Boost_MINOR_VERSION} LESS "41")

#
 # Generate the config.h
#

CHECK_INCLUDE_FILE_CXX(cxxabi.h DEVSTONE_HAVE_GCC_ABI_DEMANGLE)
CHECK_INCLUDE_FILE_CXX(execinfo.h DEVSTONE_HAVE_EXECINFO)
CHECK_INCLUDE_FILE_CXX(signal.h DEVSTONE_HAVE_SIGNAL)
INCLUDE_DIRECTORIES(${DEVSTONE_BINARY_DIR})

#
 # Generate the vle.pc pkg-config file.
 # Build some variable to build a correct Win32 pkg config file with:
 # prefix=/target to detect the DIRNAME
 # cflag=-Iboost_1_34_1 for the directory
#

SET(DEVSTONE_PKGCONFIG_PREFIXPATH "${CMAKE_INSTALL_PREFIX}")
SET(DEVSTONE_PKGCONFIG_BOOSTINCLUDE_DIRS "${Boost_INCLUDE_DIRS}")
SET(DEVSTONE_PKGCONFIG_LIBDIR "lib")

CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/src/devstone.pc.in
  ${DEVSTONE_BINARY_DIR}/devstone-${DEVSTONE_VERSION_SHORT}.pc @ONLY)
INSTALL(FILES ${DEVSTONE_BINARY_DIR}/devstone-${DEVSTONE_VERSION_SHORT}.pc
  DESTINATION lib/pkgconfig)

#
 # Install the README
#

IF(UNIX)
  INSTALL(FILES "README" DESTINATION "${DEVSTONE_SHARE_DIRS}")
  INSTALL(FILES "COPYING" DESTINATION "${DEVSTONE_SHARE_DIRS}")
ELSE(UNIX)
  INSTALL(FILES "README" DESTINATION "${DEVSTONE_SHARE_DIRS}" RENAME "Readme.txt")
  INSTALL(FILES "COPYING" DESTINATION "${DEVSTONE_SHARE_DIRS}" RENAME "CopyRight.txt")
ENDIF(UNIX)

#
 # Browse the src subdirectory
#

ADD_SUBDIRECTORY(src)

#
 # Status
#

MESSAGE(STATUS "- - - -")
MESSAGE(STATUS "${DEVSTONE_NAME_COMPLETE} configured successfully")
MESSAGE(STATUS "Using ${CMAKE_INSTALL_PREFIX} for installation")
MESSAGE(STATUS "Build type ${CMAKE_BUILD_TYPE}")
IF (DEVSTONE_HAVE_GCC_ABI_DEMANGLE)
  MESSAGE(STATUS "Build with GCC ABI Demangle...: yes")
ENDIF (DEVSTONE_HAVE_GCC_ABI_DEMANGLE)
IF (DEVSTONE_HAVE_EXECINFO)
  MESSAGE(STATUS "Build with execinfo.h.........: yes")
ENDIF (DEVSTONE_HAVE_EXECINFO)
IF (Boost_FOUND)
  MESSAGE(STATUS "Build with boost..............: yes")
ENDIF (Boost_FOUND)
MESSAGE(STATUS "- - - -")

# vim:tw=0:ts=8:tw=0:sw=2:sts=2
